#include <Wire.h>
#include "Adafruit_AS726x.h"

//create the object
Adafruit_AS726x ams;

//buffer to hold raw values
uint16_t sensorValues[AS726x_NUM_CHANNELS];

//buffer to hold calibrated values (not used by default in this example)
//float calibratedValues[AS726x_NUM_CHANNELS];

int numReads = 10;
int cont1 = 0;
int cont2 = 0;
float a;
float b;
float concentracao;
float sum1;
float sum2;
float average1;
float average2;

int pinoRed = 9; //PINO DIGITAL UTILIZADO PELO TERMINAL VERMELHO
int pinoGreen = 10; //PINO DIGITAL UTILIZADO PELO TERMINAL VERDE
int pinoBlue = 11; //PINO DIGITAL UTILIZADO PELO TERMINAL AZUL

int val; //VARIÁVEL DO TIPO INTEIRA

// EXEMPLO - http://en.wikipedia.org/wiki/Simple_linear_regression
float x[11] = {0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1};
float y[11] = {40855.80, 0.95, 0.85, 0.76, 0.71, 0.65, 0.52, 0.43, 0.32, 0.22, 0.11};
float lrCoef[2] = {0, 0};

float sum_x = 0;
float sum_y = 0;
float sum_xy = 0;
float sum_xx = 0;

void setup() {
  Serial.begin(9600);
  while(!Serial);

  pinMode(pinoRed, OUTPUT); //DEFINE O PINO COMO SAÍDA
  pinMode(pinoBlue, OUTPUT); //DEFINE O PINO COMO SAÍDA
  pinMode(pinoGreen, OUTPUT); //DEFINE O PINO COMO SAÍDA  

  analogWrite(pinoRed, 255); //PINO RECEBE O VALOR
  analogWrite(pinoGreen, 223); //PINO RECEBE O VALOR
  analogWrite(pinoBlue, 0); //PINO RECEBE O VALOR
  delay (10); //INTERVALO DE 10 MILISSEGUNDOS
  
  //initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);

  //begin and make sure we can talk to the sensor
  if(!ams.begin()){
    Serial.println("could not connect to sensor! Please check your wiring.");
    while(1);
  }

  do {
   //read the device temperature
   //uint8_t temp = ams.readTemperature();
  
   //ams.drvOn(); //uncomment this if you want to use the driver LED for readings
   ams.startMeasurement(); //begin a measurement
  
   //wait till data is available
   bool rdy = false;
   while(!rdy){
     delay(1000);
     rdy = ams.dataReady();
   }
   //ams.drvOff(); //uncomment this if you want to use the driver LED for readings

   //read the values!
   ams.readRawValues(sensorValues);
   //ams.readCalibratedValues(calibratedValues);

   for (int k = 0; k < numReads; k++){
    sum1 += sensorValues[AS726x_ORANGE];
   }
   
   //Serial.print("Temp: "); Serial.print(temp);
   //Serial.print(" Violet: "); Serial.print(sensorValues[AS726x_VIOLET]);
   //Serial.print(" Blue: "); Serial.print(sensorValues[AS726x_BLUE]);
   //Serial.print(" Green: "); Serial.print(sensorValues[AS726x_GREEN]);
   //Serial.print(" Yellow: "); Serial.print(sensorValues[AS726x_YELLOW]);
   Serial.print(" Orange: "); Serial.print(sensorValues[AS726x_ORANGE]);
   //Serial.print(" Red: "); Serial.print(sensorValues[AS726x_RED]);
   Serial.println();
   Serial.println();
   cont1++;
  } while(cont1 < numReads); 

   average1 = sum1/(numReads*numReads);
   Serial.print(" Orange Average I0 = "); Serial.print(average1);
 
 y[0] = average1;
 float y0 = y[0];
 for(int i=0; i<11; i++){
  y[i]=-log10(y[i]/y0);
 }

 // CHAMA O ALGORITMO DE REGRESSÃO LINEAR
 simpLinReg(x, y, lrCoef, 11);
 Serial.println("");
 Serial.print(" Abs = ");
 Serial.print(lrCoef[0], 4);

 if (lrCoef[1] > 0){
  Serial.print("*Conc + ");
 }
 else{
  Serial.print("*Conc ");
 }
 
 Serial.println(lrCoef[1], 4);
 a=lrCoef[0];
 b=lrCoef[1];
 

//CÓDIGO DA BOMBA

//LEITURA DA TRANSMITÂNCIA APÓS BOMBEAMENTO DO AR AMBIENTE

 Serial.begin(9600); //ligando LED novamente
 while(!Serial);

 delay (10); //INTERVALO DE 10 MILISSEGUNDOS

 if(!ams.begin()){
    Serial.println("could not connect to sensor! Please check your wiring.");
    while(1);
  }

  do {
   //read the device temperature
   //uint8_t temp = ams.readTemperature();
  
   //ams.drvOn(); //uncomment this if you want to use the driver LED for readings
   ams.startMeasurement(); //begin a measurement
  
   //wait till data is available
   bool rdy = false;
   while(!rdy){
     delay(1000);
     rdy = ams.dataReady();
   }
   //ams.drvOff(); //uncomment this if you want to use the driver LED for readings

   //read the values!
   ams.readRawValues(sensorValues);
   //ams.readCalibratedValues(calibratedValues);

   for (int w = 0; w < numReads; w++){
    sum2 += sensorValues[AS726x_ORANGE];
   }

   //Serial.print("Temp: "); Serial.print(temp);
   //Serial.print(" Violet: "); Serial.print(sensorValues[AS726x_VIOLET]);
   //Serial.print(" Blue: "); Serial.print(sensorValues[AS726x_BLUE]);
   //Serial.print(" Green: "); Serial.print(sensorValues[AS726x_GREEN]);
   //Serial.print(" Yellow: "); Serial.print(sensorValues[AS726x_YELLOW]);
   Serial.print(" Orange: "); Serial.print(sensorValues[AS726x_ORANGE]);
   //Serial.print(" Red: "); Serial.print(sensorValues[AS726x_RED]);
   Serial.println();
   Serial.println();
   cont2++;
  } while(cont2 < numReads); 

   average2 = sum2/(numReads*numReads);
   Serial.print(" Orange Average I = "); Serial.print(average2);
 
   concentracao = (average2-b)/a;
   Serial.print ("A concentração de ozonio no ambiente e : "); Serial.print(concentracao);


}

void loop() {
}

void simpLinReg(float* x, float* y, float* lrCoef, int n){
 // CALCULOS PARA REGRESSÃO LINEAR
 for (int i=0; i<n; i++){
  sum_x += x[i];
  sum_y += y[i];
  sum_xy = sum_xy+x[i]*y[i];
  sum_xx = sum_xx+x[i]*x[i];
 }
 lrCoef[0]=(n*sum_xy-sum_x*sum_y)/(n*sum_xx-sum_x*sum_x);
 lrCoef[1]=(sum_y/n)-((lrCoef[0]*sum_x)/n);
} 
